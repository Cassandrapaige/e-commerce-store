{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutFailure, signOutSuccess, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* signUp({\n  payload: email,\n  password,\n  displayName\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUp)]);\n}","map":{"version":3,"sources":["/Users/cassandrarossall/Desktop/WEB DEV/Complete_React_Developer_Course/e-commerce Store/e-commerce-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutFailure","signOutSuccess","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignUpStart","SIGN_UP_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignUpStart","onSignOutSuccess","SIGN_UP_SUCCESS","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas","onSignUp"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types'\n\nimport {\n        signInSuccess, \n        signInFailure,\n        signOutFailure,\n        signOutSuccess,\n        signUpSuccess,\n        signUpFailure,\n} from './user.actions'\n\nimport {\n        auth, \n        googleProvider, \n        createUserProfileDocument,\n        getCurrentUser\n} from '../../firebase/firebase.utils'\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n    \n    } catch(error) {\n        put(signInFailure(error))\n    }\n}\n\nexport function* signInWithGoogle() {\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user)\n\n    } catch(error) {\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signInWithEmail({payload: { email, password }}) {\n    try{\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user)\n    \n    } catch(error) {\n        put(signInFailure(error))\n    }\n}\n\nexport function* signUp({ payload: email, password, displayName }) {\n    try {\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess({ user, additionalData : {displayName}}))\n        \n    } catch (error) {\n        put(signUpFailure(error))\n    }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData }}) {\n    yield getSnapshotFromUserAuth(user, additionalData)\n}\n\nexport function* isUserAuthenticated() {\n    try{\n        const userAuth = yield getCurrentUser()\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth)\n\n    } catch(error) {\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess())\n    }catch(error) {\n        yield put(signOutFailure(error))\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_IN_START, \n        signInWithGoogle\n    )\n}\n\nexport function* onEmailSignUpStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_START,\n        signUp\n    )\n}\nexport function* onEmailSignInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_IN_START, \n        signInWithEmail\n    )\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_START,\n        signUp\n    )\n}\n\nexport function* onSignOutSuccess() {\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_SUCCESS,\n        signInAfterSignUp\n    )\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(\n        UserActionTypes.CHECK_USER_SESSION,\n        isUserAuthenticated\n    )\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_OUT_START,\n        signOut\n    )\n} \n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUp)\n    ])\n}"]},"metadata":{},"sourceType":"module"}