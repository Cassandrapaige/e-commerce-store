{"ast":null,"code":"import firebase from 'firebase/app'; // Only using auth and storage\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBAt9tdnfS23hw4OBcNIwifYdQVBp9DiOc\",\n  authDomain: \"e-commerce-50e9e.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-50e9e.firebaseio.com\",\n  projectId: \"e-commerce-50e9e\",\n  storageBucket: \"e-commerce-50e9e.appspot.com\",\n  messagingSenderId: \"733049652510\",\n  appId: \"1:733049652510:web:95ff0496373644a430750f\",\n  measurementId: \"G-6FQ6127Q1J\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // creat a query reference\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // use query reference (userRef) to GET all of current users data (if any)\n\n  const snapShot = await userRef.get(); // .exists is a property attached to the documentSnapshot object\n\n  if (!snapShot.exists) {\n    // grab properties we need before SETting our new user\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // if user doesn't exist...create new user using data from user auth object (above)\n\n    try {\n      // .set() is the document refs create method\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error catching user', error.message);\n    }\n  } //return userRef to reference it throughout our application\n\n\n  console.log(snapShot);\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Set up Google Authentication utility\n// Gives us access to GoogleAuthProvider class from authentication library\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  // Trigger google pop-up whenever we use Google auth provider\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/cassandrarossall/Desktop/WEB DEV/Complete_React_Developer_Course/e-commerce Store/e-commerce-store/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB,C,CAEA;;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,kCAFD;AAGXC,EAAAA,WAAW,EAAE,yCAHF;AAIXC,EAAAA,SAAS,EAAE,kBAJA;AAKXC,EAAAA,aAAa,EAAE,8BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWE,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc,OAD6D,CAG3E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAJ2E,CAM3E;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAP2E,CAS3E;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AAEjB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAJiB,CAMjB;;AACA,QAAI;AACA;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KARD,CAQE,OAAMa,KAAN,EAAa;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AACJ,GA5B0E,CA8B3E;;;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AAEA,SAAOJ,OAAP;AACD,CAlCM;AAqCP,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACF,CAFO;AAIP9B,QAAQ,CAACkC,aAAT,CAAuBjC,MAAvB;AAEA,OAAO,MAAMkC,IAAI,GAAGnC,QAAQ,CAACmC,IAAT,EAAb;AACP,OAAO,MAAMrB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;AAEA;;AACA,MAAMsB,QAAQ,GAAG,IAAIpC,QAAQ,CAACmC,IAAT,CAAcE,kBAAlB,EAAjB;AAEAD,QAAQ,CAACE,mBAAT,CAA6B;AACzB;AACAC,EAAAA,MAAM,EAAE;AAFiB,CAA7B;AAKA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAepC,QAAf","sourcesContent":["import firebase from 'firebase/app'\n\n// Only using auth and storage\nimport 'firebase/firestore';\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyBAt9tdnfS23hw4OBcNIwifYdQVBp9DiOc\",\n    authDomain: \"e-commerce-50e9e.firebaseapp.com\",\n    databaseURL: \"https://e-commerce-50e9e.firebaseio.com\",\n    projectId: \"e-commerce-50e9e\",\n    storageBucket: \"e-commerce-50e9e.appspot.com\",\n    messagingSenderId: \"733049652510\",\n    appId: \"1:733049652510:web:95ff0496373644a430750f\",\n    measurementId: \"G-6FQ6127Q1J\"\n  };\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n    if(!userAuth) return;\n\n    // creat a query reference\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    // use query reference (userRef) to GET all of current users data (if any)\n    const snapShot = await userRef.get();\n\n    // .exists is a property attached to the documentSnapshot object\n    if(!snapShot.exists) {\n\n        // grab properties we need before SETting our new user\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        // if user doesn't exist...create new user using data from user auth object (above)\n        try {\n            // .set() is the document refs create method\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch(error) {\n            console.log('error catching user', error.message)\n        }\n    }\n\n    //return userRef to reference it throughout our application\n    console.log(snapShot);\n\n    return userRef;\n  }\n\n\n  export const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n }\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  // Set up Google Authentication utility\n\n  // Gives us access to GoogleAuthProvider class from authentication library\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  provider.setCustomParameters({\n      // Trigger google pop-up whenever we use Google auth provider\n      prompt: 'select_account'\n  });\n  \n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}