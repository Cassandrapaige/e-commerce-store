{"ast":null,"code":"var _jsxFileName = \"/Users/cassandrarossall/Desktop/WEB DEV/Complete_React_Developer_Course/e-commerce Store/e-commerce-store/client/src/components/cart-dropdown/cart-dropdown.component.jsx\";\nimport React from 'react';\nimport { animated, useSpring, useTransition, config } from 'react-spring';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport CustomButton from '../custom-button/cutom-button.component';\nimport CartItem from '../cart-item/cart-item.component';\nimport { selectCartItems, selectCartItemsCount, selectSuccessMessage } from '../../redux/cart/cart.selectors';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\nimport './cart-dropdown.styles.scss';\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  toggleCartHidden,\n  dispatch,\n  hidden,\n  successMessage,\n  itemCount\n}) => {\n  const transitions = useTransition(toggleCartHidden, null, {\n    config: config.default,\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    }\n  });\n  return transitions.map(({\n    item,\n    props\n  }) => item && /*#__PURE__*/React.createElement(animated.div, {\n    style: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"success-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, successMessage), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, cartItems.length ? /*#__PURE__*/React.createElement(CartItem, {\n    key: cartItems[cartItems.length - 1].id,\n    item: cartItems[cartItems.length - 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"empty-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Your cart is empty\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    inverted: true,\n    onClick: () => {\n      history.push('/checkout');\n      toggleCartHidden();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, \"View Bag (\", itemCount, \")\"), /*#__PURE__*/React.createElement(CustomButton, {\n    onClick: () => {\n      history.push('/checkout');\n      toggleCartHidden();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Checkout\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen-overlay\",\n    onClick: toggleCartHidden,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  })));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  itemCount: selectCartItemsCount,\n  successMessage: selectSuccessMessage\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden())\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CartDropdown));","map":{"version":3,"sources":["/Users/cassandrarossall/Desktop/WEB DEV/Complete_React_Developer_Course/e-commerce Store/e-commerce-store/client/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","animated","useSpring","useTransition","config","connect","createStructuredSelector","withRouter","CustomButton","CartItem","selectCartItems","selectCartItemsCount","selectSuccessMessage","toggleCartHidden","CartDropdown","cartItems","history","dispatch","hidden","successMessage","itemCount","transitions","default","from","opacity","enter","leave","map","item","props","length","id","push","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {animated, useSpring, useTransition, config} from 'react-spring'\nimport { connect } from 'react-redux'\nimport {createStructuredSelector} from 'reselect'\nimport {withRouter} from 'react-router-dom'\n\nimport CustomButton from '../custom-button/cutom-button.component'\nimport CartItem from '../cart-item/cart-item.component'\n\nimport {selectCartItems, selectCartItemsCount, selectSuccessMessage} from '../../redux/cart/cart.selectors'\n\nimport {toggleCartHidden} from '../../redux/cart/cart.actions'\n\nimport './cart-dropdown.styles.scss'\n\nconst CartDropdown = ({ cartItems, history, toggleCartHidden, dispatch, hidden, successMessage, itemCount }) => {\n\n    const transitions = useTransition(toggleCartHidden, null, {\n        config: config.default,\n        from: {opacity: 0},\n        enter: {opacity: 1},\n        leave: {opacity: 0}\n    })\n\nreturn transitions.map(({ item, props}) => item && (\n    <animated.div style = {props} >\n    <div className=\"cart-dropdown\">\n        <div className=\"success-message\">\n             {successMessage}\n        </div>\n        <div className=\"cart-items\">\n            {\n                cartItems.length ? (\n                <CartItem \n                    key = {cartItems[cartItems.length -1].id} \n                    item ={cartItems[cartItems.length -1]} />\n            ) : (\n                <span className=\"empty-message\">Your cart is empty</span>\n            )\n            }\n        </div>\n        <div className=\"cart-buttons\">\n            <CustomButton inverted\n                onClick = {() => {\n                history.push('/checkout')\n                toggleCartHidden()}}>\n                View Bag ({itemCount})\n            </CustomButton>\n            <CustomButton \n                onClick = {() => {\n                history.push('/checkout')\n                toggleCartHidden()}}>\n                Checkout\n            </CustomButton>\n        </div>\n    </div>\n    <div className=\"screen-overlay\" onClick = {toggleCartHidden}></div>\n    </animated.div>\n))}\n\nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems,\n    itemCount: selectCartItemsCount,\n    successMessage: selectSuccessMessage\n})\n\nconst mapDispatchToProps = dispatch => ({\n    toggleCartHidden: () => dispatch(toggleCartHidden())\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CartDropdown))\n"]},"metadata":{},"sourceType":"module"}